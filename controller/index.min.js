'use strict';"production"!==process.env.NODE_ENV&&require("dotenv").config();const express=require("express"),app=express(),passport=require("passport"),GoogleStrategy=require("passport-google-oauth20").Strategy;LocalStrategy=require("passport-local").Strategy;router=express.Router();googleClientSecret=process.env.GOOGLE_CLIENT_SECRET;googleClientID=process.env.GOOGLE_CLIENT_ID;User=require("../model/User");crypto=require("crypto");bcrypt=require("bcryptjs");
router.get("/*",(a,b,c)=>{a.app.locals="index";c()});router.get("/",(a,b)=>{b.send("Welcome to Server")});
router.post("/api/signup",(a,b)=>{console.log("...receiving from signup");a.body.email&&a.body.name&&a.body.password||b.status(401).json({error:"Fill in Fieldsd"});User.findOne({email:a.body.email}).then(c=>{if(c)b.status(402).json({error:"Email already exists"});else{const d=new User;d.email=a.body.email;d.name=a.body.name;bcrypt.genSalt(10,(e,f)=>{bcrypt.hash(a.body.password,f,(g,h)=>{g&&console.log(g);d.password=h;d.save().then(k=>{b.status(200).json({response:`${k.name} has been created successfully`});
console.log(k)}).catch(k=>console.log(k))})})}}).catch(c=>console.log(c))});passport.serializeUser((a,b)=>{b(null,a.id)});passport.deserializeUser((a,b)=>{User.findById(a,function(c,d){b(c,d)})});
passport.use(new GoogleStrategy({clientID:googleClientID,clientSecret:googleClientSecret,callbackURL:"/auth/google/callback"},(a,b,c,d)=>{console.log("Access Token:",a);console.log("Refresh Token:",b);console.log("Profile:",c);User.findOne({googleID:c.id}).then(e=>{if(e)return d(null,e);e=new User;e.googleId=c.id;e.email=c.emails.value;e.name=c.displayName||"User";e.save().then(f=>d(null,f)).catch(f=>console.log(f))})}));
router.get("/api/auth/google",passport.authenticate("google",{scope:["profile","email"]}));router.get("/api/current_user",(a,b)=>{b.send(a.user)});router.get("/api/auth/google/callback",passport.authenticate("google"),(a,b)=>{b.redirect("/dahsboard")});
passport.use(new LocalStrategy({usernameField:"email"},(a,b,c)=>{User.findOne({email:a}).then(d=>{if(d)bcrypt.compare(b,d.password,(e,f)=>{e&&console.log(e);f?c(null,d):c(null,!1,{message:"Password Mismatch"})});else return c(null,!1,{message:"Email not recognised"})}).catch(d=>console.log(d))}));
router.post("/api/signin",passport.authenticate("local",{failureRedirect:"/api/signup",failureFlash:!1}),(a,b,c)=>{User.findOne({email:a.body.email}).then(d=>{d?bcrypt.compare(a.body.password,d.password,(e,f)=>{e&&console.log(e);f?b.status(200).json({user:d}):(b.status(401).json({error:"Password Mismatch"}),console.log(d))}):b.status(402).json({error:"User Not Found"})}).catch(d=>console.log(errr))});router.get("/api/signout",(a,b)=>{a.logout();b.status(200).json({success:"Logged out :)"})});
router.post("/api/forgot",(a,b)=>{crypto.randomBytes(20,(c,d)=>{c&&console.log(c);const e=d.toString("hex");User.findOne({email:a.body.email}).then(f=>{f?(f.token=e,f.token_expiry=Date.now()+36E4,f.save().then(g=>{console.log(`http://localhost:2026/reset/${e}`);b.status(200).json({success:"Password reset link sent"})}).catch(g=>console.log(g))):b.status(402).json({error:"Email not recognised"})}).catch(f=>console.log(f))})});
router.post("/api/token/:token",(a,b)=>{User.findOne({token:a.params.token,token_expiry:{$gt:Date.now()}}).then(c=>{c?bcrypt.genSalt(10,(d,e)=>{bcrypt.hash(a.body.password,e,(f,g)=>{f&&console.log(f);c.password=g;c.save().then(h=>{b.status(200).json({success:"Password reset successful. Sign in"})}).catch(h=>console.log(h))})}):b.status(402).json({error:"Token Expired! Retry"})})});
router.post("/api/user/edit/:id",(a,b)=>{User.findById(a.params.id).then(c=>{a.body.password?(c.name=a.body.name,c.email=a.body.email,bcrypt.genSalt(10,(d,e)=>{bcrypt.hash(a.body.password,e,(f,g)=>{c.password=g;c.save().then(h=>{b.status(200).json({user:h})}).catch(h=>console.log(h))})})):(c.name=a.body.name,c.email=a.body.email,c.save().then(d=>{b.status(200).json({user:d})}).catch(d=>console.log(d)))})});module.exports=router;